#!/usr/bin/env ruby

require File.expand_path(File.join(File.dirname(__FILE__), '../lib/galaxy/agent/agent'))
require File.expand_path(File.join(File.dirname(__FILE__), '../lib/galaxy/agent/config'))

require 'optparse'
require 'ostruct'

action = "help"

agent_config = {}
agent_config[:verbose] = false
agent_config[:test] = false

opts = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} <command> [options]"

    opts.separator "  Commands, use just one of these"

    opts.on("-s", "--start", "Start the agent") { action = "start" }
    opts.on("-k", "--stop", "Stop the agent") { action = "stop" }

    opts.separator "  Options for Start"

    opts.on("-C", "--config FILE", "Configuration file (overrides GALAXY_CONFIG)") do |arg|
        agent_config[:config] = arg
    end
    opts.on("-i", "--identifier IDENTIFIER", "Slot identifier this agent manages (default *unset*)") do |agent_id|
        agent_config[:agent_id] = agent_id
    end
    opts.on("-g", "--group GROUP", "Slot grouping that this agent belongs to (default *unknown*)") do |agent_group|
        agent_config[:agent_group] = agent_group
    end
    opts.on("-U", "--agent-url ['http://'|'druby://']HOST[:PORT]", "Local Agent URL that the agent announces. Default: druby://localhost:4441") do |agent_url|
        agent_config[:agent_url] = agent_url
    end
    opts.on("-m", "--machine MACHINE", "Physical machine where the agent lives (overrides -M)") do |machine|
        agent_config[:machine] = machine
    end
    opts.on("-M", "--machine-file FILE", "Filename containing the physical machine name") do |machine_file|
        agent_config[:machine_file] = machine_file
    end
    opts.on("-c", "--console ['http://'|'druby://']HOST[:PORT]", "Hostname where the console is listening") do |console|
        agent_config[:console_url] = console
    end
    opts.on("-r", "--repository URL", "Base URL for the repository") do |repo|
        agent_config[:repository] = repo
    end
    opts.on("-b", "--binaries URL", "Base URL for the binary archive") do |bin|
        agent_config[:binaries] = bin
    end
    opts.on("-d", "--deploy-to DIR", "Directory where to make deployments") do |path|
        agent_config[:deploy_dir] = path
    end
    opts.on("-x", "--data DIR", "Directory for the agent's database") do |path|
        agent_config[:data_dir] = path
    end
    opts.on("-f", "--fore", "--foreground", "Run agent in the foreground") do
        agent_config[:foreground] = true
    end
    opts.on("-a", "--announce-interval INTERVAL", "How frequently (in seconds) the agent should announce") do |interval|
        agent_config[:announce_interval] = interval
    end
    opts.on("-e", "--slot-environment FILE", "YAML file containing the slot environment for the deployment") do |slot_environment|
        agent_config[:slot_environment] = slot_environment
    end

    opts.separator "  General Options"

    opts.on_tail("-l", "--log LOG", "STDOUT | STDERR | SYSLOG | /path/to/file.log") do |log|
        agent_config[:log] = log
    end
    opts.on_tail("-L", "--log-level LEVEL", "DEBUG | INFO | WARN | ERROR. Default=INFO") do |level|
        agent_config[:log_level] = level
    end
    opts.on_tail("-u", "--user USER", "User to run as") do |arg|
        agent_config[:user] = arg
    end
    opts.on("-H", "--http-user USER", "HTTP User for authentication.") do |http_user|
        agent_config[:http_user] = http_user
    end
    opts.on("-P", "--http-password PASSWORD", "HTTP Password for authentication.") do |http_password|
        agent_config[:http_password] = http_password
    end
    opts.on("-N", "--no-legacy", "Use the new galaxy console (4.0.0)") do |http_password|
        agent_config[:legacy] = false
    end

    opts.on_tail("-t", "--test", "Test, displays as -v without doing anything") do
        agent_config[:verbose] = true
        agent_config[:test] = true
    end

    opts.on_tail("-v", "--verbose", "Verbose output") { agent_config[:verbose] = true }
    opts.on_tail("-V", "--version", "Print the galaxy version and exit") { action = "version" }
    opts.on_tail("-h", "--help", "Show this help") { action = "help" }

    begin
        opts.parse! ARGV
    rescue Exception => msg
        puts opts
        puts msg
        exit 1
    end
end

agent_config = Galaxy::Agent::Configuration.new(agent_config).options

case action
    when "help"
        puts opts

    when "version"
        puts "Galaxy version #{Galaxy::Agent::VERSION}"

    when "start"
        exit if agent_config[:test]

        if agent_config[:foreground]
            Galaxy::Agent::Agent.new(agent_config)
        else
            Galaxy::Daemon.start('galaxy-agent', agent_config[:pid_file], agent_config[:user]) do
                Galaxy::Agent::Agent.new(agent_config)
            end
        end

    when "stop"
        begin
            Galaxy::Daemon.kill_daemon(agent_config[:pid_file])
        rescue Exception => e
            abort("Error: #{e}")
        end
end